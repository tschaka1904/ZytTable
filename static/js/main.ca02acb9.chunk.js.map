{"version":3,"sources":["Data/tram_info.js","Timetable/TimeTableHeader.js","Timetable/TimeTableTitle.js","Utils/TimeTableUtils.js","Timetable/TimeTableColumn.js","Timetable/TimeTable.js","App.js","serviceWorker.js","index.js"],"names":["TOWN_NAMES","WHERE_AM_I","BASEL","DREIROSENBRUECKE","name","exclude","id","RIEHENRING","SBB","BARFUESSERPLATZ","TimeTableHeader","react_default","a","createElement","className","style","height","Component","defaultPropTypes","TimeTableTitle","color","lastUpdate","TIMETABLE_STATUS","CANCELED","ARRIVED","ARRIVES_SHORTLY","calculateDepartureTime","plannedDepartureDateString","currentDelayString","currentDate","estimatedDeparture","moment","delayInMinutes","split","add","duration","check","diff","asMilliseconds","MILLISECONDS","FIFTEEN_SECONDS","ONE_MINUTE","Math","floor","asMinutes","TEN_SECONDS","TimeTableColumn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","show","interval","_this2","item","planned_arrival_time","setInterval","blink","clearInterval","setState","concat","line","destination","includes","TimeTable","timeTableItems","setup","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","_this3","axios","get","BASE_URL","then","response","reducedItemList","data","connections","slice","freshTimeTableItems","forEach","rawItem","timeTableColumnObj","rawItemObject","vehicleType","type","time","dep_delay","terminal","delay","timeTableColumnObjectFactory","push","length","format","TimeTableTitle_TimeTableTitle","splice","map","Timetable_TimeTableColumn","key","random","App","TimeTable_TimeTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca02acb9.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = '//timetable.search.ch/api/';\n\nconst TOWN_NAMES = {\n    BASEL: 'Basel'\n};\n\nconst STATIONS = {\n    BASEL: {\n        DREIROSENBRUECKE: {\n            name: 'Dreirosenbrücke',\n            exclude: TOWN_NAMES.BASEL,\n            id: 8588768\n        },\n        RIEHENRING: {\n            name: 'Riehenring',\n            exclude: TOWN_NAMES.BASEL,\n            id: 8589352\n        },\n        SBB: {\n            name: 'Basel SBB',\n            exclude: TOWN_NAMES.BASEL,\n            id: 8500010\n        },\n        BARFUESSERPLATZ: {\n            name: 'Barfüsserplatz',\n            exclude: TOWN_NAMES.BASEL,\n            id: 8500897\n        }\n    }\n};\n\n\n\nexport const WHERE_AM_I = STATIONS.BASEL.RIEHENRING;\n\nexport const getData = () => axios.get(BASE_URL + 'stationboard.json?stop=' + WHERE_AM_I.id + '&show_delays=1')\n    .then(response => response);","import React, {Component} from 'react';\n\nclass TimeTableHeader extends Component {\n    render() {\n        return (\n            <div className=\"row\" style={{height: 'calc(100vh / 7)'}}>\n                <div className=\"col-2 text-center\">\n                    <h2 className=\"text-responsive\"><u>Linie</u></h2>\n                </div>\n                <div className=\"col-7 text-left\">\n                    <h2 className=\"text-responsive\"><u>Fahrtziel</u></h2>\n                </div>\n                <div className=\"col-3 text-center\">\n                    <h2 className=\"text-responsive\"><u>Abfahrt</u></h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nTimeTableHeader.defaultPropTypes = {};\nTimeTableHeader.propTypes = {};\n\nexport default TimeTableHeader;","import React, {Component} from 'react';\nimport {WHERE_AM_I} from \"../Data/tram_info\";\nimport PropTypes from \"prop-types\";\n\nexport default class TimeTableTitle extends Component {\n    render() {\n        return (\n            <div className=\"row\" style={{height: 'calc(100vh / 6)'}}>\n                <div className=\"col-12 text-center\">\n                    <span style={{color: '#c7c3c3'}} className=\"text-responsive\">{WHERE_AM_I.name}</span>\n                </div>\n                {/*<div className=\"col-4 text-center\">*/}\n                {/*    <span className=\"text-responsive\">{this.props.lastUpdate}</span>*/}\n                {/*</div>*/}\n            </div>\n        );\n    }\n}\n\nTimeTableTitle.defaultPropTypes = {\n    lastUpdate: ''\n};\n\nTimeTableTitle.propTypes = {\n    lastUpdate: PropTypes.string\n};","import moment from \"moment\";\n\nexport const TIMETABLE_STATUS = {\n    CANCELED: 'X',\n    ARRIVED: 'jetzt',\n    ARRIVES_SHORTLY: '<1'\n};\n\nexport function calculateDepartureTime(plannedDepartureDateString, currentDelayString, currentDate) {\n    let estimatedDeparture = moment(plannedDepartureDateString);\n\n    let delayInMinutes = 0;\n\n    if (currentDelayString === 'X') {\n        return TIMETABLE_STATUS.CANCELED\n    }\n\n    if (currentDelayString && currentDelayString.split('+')[1] !== '0') {\n        delayInMinutes = currentDelayString.split('+')[1];\n        estimatedDeparture = estimatedDeparture.add(moment.duration(delayInMinutes, 'm'));\n    }\n\n    const check = moment.duration(estimatedDeparture.diff(currentDate));\n\n    if (check.asMilliseconds() < -MILLISECONDS.FIFTEEN_SECONDS) {\n        return null;\n    }\n\n    if (check.asMilliseconds() < MILLISECONDS.FIFTEEN_SECONDS) {\n        return TIMETABLE_STATUS.ARRIVED;\n    }\n\n    if (check.asMilliseconds() < MILLISECONDS.ONE_MINUTE) {\n        return TIMETABLE_STATUS.ARRIVES_SHORTLY;\n    }\n\n    return Math.floor(check.asMinutes()) + '\\'';\n}\n\nexport function timeTableColumnObjectFactory(rawItemObject, currentDate) {\n    return {\n        vehicleType: rawItemObject.type,\n        planned_arrival_time: calculateDepartureTime(rawItemObject.time, rawItemObject.dep_delay, currentDate),\n        time: rawItemObject.time,\n        destination: rawItemObject.terminal.name,\n        line: rawItemObject.line,\n        delay: rawItemObject.dep_delay,\n    };\n}\n\nexport const MILLISECONDS = {\n    TEN_SECONDS: 10000,\n    FIFTEEN_SECONDS: 15000,\n    ONE_MINUTE: 60000,\n};\n","import React, {Component} from 'react';\nimport {WHERE_AM_I} from \"../Data/tram_info\";\nimport PropTypes from \"prop-types\";\nimport {TIMETABLE_STATUS} from \"../Utils/TimeTableUtils\";\n\nclass TimeTableColumn extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n        };\n        this.interval = null;\n    }\n\n    componentDidMount() {\n        if (this.props.item.planned_arrival_time === TIMETABLE_STATUS.ARRIVED) {\n            this.interval = setInterval(() => {\n                this.blink()\n            }, 1000);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    blink() {\n        this.setState({\n            show: !this.state.show\n        })\n    }\n\n    render() {\n        return (\n            <div className={`row text-height ${this.state.show ? '' : 'invisible'}`} style={{height: 'calc(100vh / 6)'}}>\n                <div className=\"col-4 col-lg-2 text-left text-lg-center\">\n                    <span className=\"text-responsive\">{this.props.item.line}</span>\n                </div>\n                <div className=\"order-lg-2 col-8 col-lg-4 text-right text-lg-center\">\n                        <span className=\"text-responsive\">{this.props.item.planned_arrival_time}</span>\n                </div>\n                <div className=\"order-lg-1 col-12 col-lg-6 text-left\">\n                    <span className=\"text-responsive\">{this.props.item.destination.includes(WHERE_AM_I.exclude) ?\n                        this.props.item.destination.split(',')[1] : this.props.item.destination}</span>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nTimeTableColumn.defaultPropTypes = {\n    item: null,\n};\nTimeTableColumn.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default TimeTableColumn;","import React, {Component} from \"react\";\nimport {getData} from \"../Data/tram_info\";\nimport TimeTableHeader from \"./TimeTableHeader\";\nimport TimeTableTitle from \"./TimeTableTitle\";\nimport TimeTableColumn from \"./TimeTableColumn\";\nimport {MILLISECONDS, timeTableColumnObjectFactory} from \"../Utils/TimeTableUtils\";\nimport moment from \"moment\";\n\n\nexport default class TimeTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeTableItems: [],\n            lastUpdate: null\n        };\n    }\n\n    componentDidMount() {\n        this.setup();\n        setInterval(async () => {\n            this.setup();\n        }, MILLISECONDS.TEN_SECONDS);\n    }\n\n    setup() {\n        getData().then(response => {\n            const reducedItemList = response.data.connections.slice(0, 20);\n            const freshTimeTableItems = [];\n            const currentDate = moment();\n            reducedItemList.forEach((rawItem) => {\n                const timeTableColumnObj = timeTableColumnObjectFactory(rawItem, currentDate);\n                if (timeTableColumnObj.planned_arrival_time) {\n                    freshTimeTableItems.push(timeTableColumnObj)\n                }\n            });\n            if (freshTimeTableItems.length) {\n                this.setState({\n                    timeTableItems: freshTimeTableItems,\n                    lastUpdate: moment().format('HH:mm:ss a')\n                });\n            }\n        });\n    }\n\n\n    render() {\n        if (!this.state.timeTableItems.length) {\n            return null;\n        }\n        return (\n            <div className=\"container\" >\n                <TimeTableTitle lastUpdate={this.state.lastUpdate}/>\n                {/*<TimeTableHeader/>*/}\n                {this.state.timeTableItems.splice(0, 5).map((item) =>\n                    <TimeTableColumn key={item.vehicleType + '-' + item.line + Math.random()} item={item}/>\n                )}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport TimeTable from \"./Timetable/TimeTable\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TimeTable/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}